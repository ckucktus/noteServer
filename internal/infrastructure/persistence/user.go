package persistence

import (
	"database/sql"
	"errors"
	"fmt"
	"github.com/lib/pq"
	"test_task/internal/domain/entity"
)

var ErrUserNotFound = errors.New("user not found")

type UserStorage struct {
	db *sql.DB
}

func NewUserStorage(dsn string) (UserStorage, error) {
	const op = "infrastructure.persistence.NewStorage"
	parsedURL, err := pq.ParseURL(dsn)
	if err != nil {
		return UserStorage{}, err
	}
	db, err := sql.Open("postgres", parsedURL)

	if err != nil {
		return UserStorage{}, err
	}

	stmt, err := db.Prepare(`
	CREATE TABLE IF NOT EXISTS Users(
		user_id integer not null generated by default as identity(increment 1 minvalue 1 start 1 cache 1),
	    name TEXT NOT NULL,
		login TEXT NOT NULL UNIQUE,
	    password TEXT NOT NULL
	);
	`)
	if err != nil {
		return UserStorage{}, fmt.Errorf("%s: %w", op, err)
	}

	_, err = stmt.Exec()
	if err != nil {
		return UserStorage{}, fmt.Errorf("%s: %w", op, err)
	}

	return UserStorage{db: db}, nil
}

func (s UserStorage) GetUser(login string) (entity.User, error) {
	const op = "infrastructure.persistence.SaveNote"
	// todo добавить контекст в зпросы к бд

	stmt, err := s.db.Prepare("SELECT user_id, name FROM Users WHERE login = $1")
	if err != nil {
		return entity.User{}, fmt.Errorf("%s: %w", op, err)
	}

	var res entity.User

	err = stmt.QueryRow(login).Scan(&res.Id, &res.Name)
	if errors.Is(err, sql.ErrNoRows) {
		return entity.User{}, ErrUserNotFound
	}
	if err != nil {
		return entity.User{}, fmt.Errorf("%s: %v", op, err)
	}

	return res, nil
}

func (s UserStorage) UserAuthentication(login, password string) (int64, error) {
	const op = "infrastructure.persistence.SaveNote"
	// todo добавить контекст в зпросы к бд

	stmt, err := s.db.Prepare("SELECT user_id, name FROM Users WHERE login = $1 and password = $2")
	if err != nil {
		return 0, fmt.Errorf("%s: %w", op, err)
	}

	var res entity.User
	err = stmt.QueryRow(login, password).Scan(&res.Id, &res.Name)
	if errors.Is(err, sql.ErrNoRows) {
		return 0, ErrUserNotFound
	}
	if err != nil {
		return 0, fmt.Errorf("%s: %v", op, err)
	}

	return res.Id, nil
}
